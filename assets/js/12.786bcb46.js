(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{579:function(s,t,a){"use strict";a.r(t);var n=a(5),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"操作系统教程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统教程"}},[s._v("#")]),s._v(" 操作系统教程")]),s._v(" "),a("h2",{attrs:{id:"第六章-并发程序设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第六章-并发程序设计"}},[s._v("#")]),s._v(" 第六章 并发程序设计")]),s._v(" "),a("h3",{attrs:{id:"_6-1-并发程序设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-并发程序设计"}},[s._v("#")]),s._v(" 6.1 并发程序设计")]),s._v(" "),a("h4",{attrs:{id:"_6-1-1-并发程序设计概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-1-并发程序设计概念"}},[s._v("#")]),s._v(" 6.1.1 并发程序设计概念")]),s._v(" "),a("h5",{attrs:{id:"_1、顺序程序设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、顺序程序设计"}},[s._v("#")]),s._v(" 1、顺序程序设计")]),s._v(" "),a("p",[s._v("概念：程序是实现算法的操作序列")]),s._v(" "),a("p",[a("strong",[s._v("内部顺序性")]),s._v("：每个程序"),a("strong",[s._v("在处理器上")]),s._v("执行是严格有序的称为程序执行的内部顺序性")]),s._v(" "),a("p",[a("strong",[s._v("外部顺序性")]),s._v("：把一个具体问题的求解过程设计成"),a("strong",[s._v("一个程序")]),s._v("或者"),a("strong",[s._v("若严格顺序执行的程序序列")]),s._v("，这称为程序执行的外部顺序性")]),s._v(" "),a("p",[a("strong",[s._v("顺序程序设计的特性：")])]),s._v(" "),a("ul",[a("li",[s._v("程序执行的顺序性：程序指令执行是严格按序的")]),s._v(" "),a("li",[s._v("计算机环境的封闭性：程序运行时如同独占操作系统保护的资源")]),s._v(" "),a("li",[s._v("计算结果的确认性：程序执行结果与执行速度和执行时段无关")]),s._v(" "),a("li",[s._v("计算过程的可在现性：程序对相同数据集的执行轨迹是确定的")])]),s._v(" "),a("h5",{attrs:{id:"_2、并发程序设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、并发程序设计"}},[s._v("#")]),s._v(" 2、并发程序设计")]),s._v(" "),a("p",[s._v("多道程序设计让多个程序同时进入内存去竞争处理器以获得运行机会，与外设以及不同外设之间的并行度，一次提高处理器的利用率")]),s._v(" "),a("p",[s._v("OS允许计算机系统在一个时间段内存在多个正在运行的进程，即允许多个进程并发执行")]),s._v(" "),a("p",[s._v("OS保证按照“顺序程序设计”方法编制的程序在并发执行时不受影响，如同独占计算机")]),s._v(" "),a("p",[s._v("这些按照顺序程序设计思想编制的进程在OS中并发执行属于无关的并发进程")]),s._v(" "),a("p",[a("strong",[s._v("并发程序设计的引入例-顺序程序设计")])]),s._v(" "),a("p",[s._v("循环地(从输入机读78秒再计算52秒再向磁带机输出20秒)")]),s._v(" "),a("p",[s._v("按照顺序程序设计方法，设计成如下一个程序：")]),s._v(" "),a("p",[s._v("while(1) {input，process，output }")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151028277.png",alt:"image-20211215102803931"}})]),s._v(" "),a("p",[s._v("处理器利用率：52/(78+52+20)≈35%")]),s._v(" "),a("p",[s._v("并发程序设计的引入例-并发程序设计")]),s._v(" "),a("p",[s._v("换一种设计思路，设计3个独立运行的程序，让它们同时进入多道程序系统去并发执行")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" while(1) {input，send }\n\n while(1) {receive，process，send }\n\n while(1) { receive，output }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151030087.png",alt:"image-20211215103053045"}})]),s._v(" "),a("p",[s._v("处理器利用率：(52"),a("em",[s._v("n) /(78+52")]),s._v("n+20*n)≈72%")]),s._v(" "),a("p",[s._v("并发程序设计：把一个具体问题求解设计成若干个课同时执行的程序模块的方法")]),s._v(" "),a("p",[s._v("并发程序设计的特性：")]),s._v(" "),a("ul",[a("li",[s._v("并行性：多个进程在多道程序系统中并发执行或者在多处理器系统中并行执行，"),a("strong",[s._v("提高了计算效率")])]),s._v(" "),a("li",[s._v("共享性：多个进程共享软件资源")]),s._v(" "),a("li",[s._v("交互性：多个进程并发执行存在制约，"),a("strong",[s._v("增加了程序设计的难度")])])]),s._v(" "),a("h4",{attrs:{id:"_6-1-2-并发进程的制约关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-2-并发进程的制约关系"}},[s._v("#")]),s._v(" 6.1.2 并发进程的制约关系")]),s._v(" "),a("h5",{attrs:{id:"_1、无关与交互的并发进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、无关与交互的并发进程"}},[s._v("#")]),s._v(" 1、无关与交互的并发进程")]),s._v(" "),a("p",[a("strong",[s._v("无关的并发进程")]),s._v("：一组并发进程分别在"),a("strong",[s._v("不同")]),s._v("的变量集合上运行，一个进程的执行与其他并发进程的进展无关")]),s._v(" "),a("p",[a("strong",[s._v("交往的并发进程")]),s._v("：一组并发进程"),a("strong",[s._v("共享")]),s._v("某些变量，一个进程的执行可能影响其他并发进程的结果")]),s._v(" "),a("h5",{attrs:{id:"_2、与时间相关的程序设计错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、与时间相关的程序设计错误"}},[s._v("#")]),s._v(" 2、与时间相关的程序设计错误")]),s._v(" "),a("p",[s._v("对于一组交往的并发进程，执行的相对速度无法相互控制")]),s._v(" "),a("p",[s._v("如果程序设计不当，可能出现各种”与时间有关的“错误")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("表现1：结果错误")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Int A[1..m]\t\t// 机票数共享变量\nprocess Ti {    // i = 1, 2, … \n \tInt Xi;\n   按旅客定票要求找到航班j；\n\tXi = A[j];\n\tif (Xi>=1)  { \n           Xi = Xi - 1; \n           A[j] = Xi;\n           {输出一张票}；\n\t} else {输出票已售完}；\n}\n进程1在此区间内被中断，进程2又卖此航班的票\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("表现2：永远等待")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Int x；\t//记录空闲内存量的共享变量\nprocedure borrow (Int B) {\n   if  (B>x)  //此处中断\n      {进入等待队列等待主存资源} //永远等待\n   x=x-B; {修改主存分配表, 获得主存资源} \n}\nprocedure return (int B) {\n      x=x+B;\n      {修改主存分配表}\n      {释放等主存资源的进程} //全部归还\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])])]),s._v(" "),a("h5",{attrs:{id:"_3、进程执行的制约关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、进程执行的制约关系"}},[s._v("#")]),s._v(" 3、进程执行的制约关系")]),s._v(" "),a("p",[s._v("制约关系包括两类：进程互斥和进程同步")]),s._v(" "),a("p",[a("strong",[s._v("进程互斥")]),s._v("：并发进程之间因"),a("strong",[s._v("相互争夺独占性资源")]),s._v("而产生的竞争制约关系")]),s._v(" "),a("p",[a("strong",[s._v("进程同步")]),s._v("：并发进程之间"),a("strong",[s._v("为完成共同任务基于某个条件来协调执行先后关系")]),s._v("而产生的协作制约关系")]),s._v(" "),a("p",[a("strong",[s._v("竞争是一种特殊的协作")]),s._v("，"),a("strong",[s._v("进程互斥是一种特殊的进程同步关系")])]),s._v(" "),a("h3",{attrs:{id:"_6-2-临界区管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-临界区管理"}},[s._v("#")]),s._v(" 6.2 临界区管理")]),s._v(" "),a("h4",{attrs:{id:"_6-2-1-临界区概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-1-临界区概念"}},[s._v("#")]),s._v(" 6.2.1 临界区概念")]),s._v(" "),a("h5",{attrs:{id:"_1、互斥和临界区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、互斥和临界区"}},[s._v("#")]),s._v(" 1、互斥和临界区")]),s._v(" "),a("p",[s._v("临界资源：互斥共享变量所代表的资源，即一次只能被一个进程使用的资源")]),s._v(" "),a("p",[s._v("临界区：指并发进程中互斥共享变量相关的程序段")]),s._v(" "),a("p",[s._v("多个并发进程访问临界区资源时，存在竞争制约关系，如果两个进程同时停留在相关的临界区内，就会出现与时间相关的错误")]),s._v(" "),a("h5",{attrs:{id:"_2、临界区的描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、临界区的描述"}},[s._v("#")]),s._v(" 2、临界区的描述")]),s._v(" "),a("p",[s._v("确定临界资源")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("shared <variable>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("确定临界区")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("region  <variable>  do < statement_list>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("两个进程的临界区有相同的临界资源就是相关的临界区，必须互斥进入")]),s._v(" "),a("p",[s._v("两个临界区不相关，进入就没有限制")]),s._v(" "),a("h5",{attrs:{id:"_3、临界区管理的三个要求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、临界区管理的三个要求"}},[s._v("#")]),s._v(" 3、临界区管理的三个要求")]),s._v(" "),a("ul",[a("li",[s._v("一次至多允许一个进程停留在相关的临界区内")]),s._v(" "),a("li",[s._v("一个进程不能无限止地停留在临界区内（如果一有进程在临界区中，试图进入此临界区的其他进程应等待）")]),s._v(" "),a("li",[s._v("一个进程不能无限止地等待进入临界区（进入临界区内的进程应在有限时间内退出，以便让等待队列中等待的进程进入）")])]),s._v(" "),a("h5",{attrs:{id:"_4、临界区的嵌套使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、临界区的嵌套使用"}},[s._v("#")]),s._v(" 4、临界区的嵌套使用")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151116088.png",alt:"image-20211215111644000"}})]),s._v(" "),a("h4",{attrs:{id:"_6-2-2-临界区管理实现的尝试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-2-临界区管理实现的尝试"}},[s._v("#")]),s._v(" 6.2.2 临界区管理实现的尝试")]),s._v(" "),a("h5",{attrs:{id:"_1、临界区管理-尝试一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、临界区管理-尝试一"}},[s._v("#")]),s._v(" 1、"),a("strong",[s._v("临界区管理：尝试一")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151447264.png",alt:"image-20211215144618318"}})]),s._v(" "),a("p",[s._v("在p1进入，且没有将inside置为为true，p2也进入导致同时进入")]),s._v(" "),a("h5",{attrs:{id:"_2、临界区管理-尝试二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、临界区管理-尝试二"}},[s._v("#")]),s._v(" 2、"),a("strong",[s._v("临界区管理：尝试二")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151451477.png",alt:"image-20211215145143346"}})]),s._v(" "),a("p",[s._v("有可能每个进程都将自己的标志置为true，从而出现死循环，这时没有进程能在有限时间内进入临界区")]),s._v(" "),a("h5",{attrs:{id:"_3、解决思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、解决思路"}},[s._v("#")]),s._v(" 3、"),a("strong",[s._v("解决思路：")])]),s._v(" "),a("p",[s._v("问题：框内的（测试锁、建立锁）两条指令执行过程不能中断")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151457359.png",alt:"image-20211215145715209"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151458146.png",alt:"image-20211215145800061"}})]),s._v(" "),a("h4",{attrs:{id:"_6-2-3-临界区管理实现的硬件方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-3-临界区管理实现的硬件方式"}},[s._v("#")]),s._v(" 6.2.3 临界区管理实现的硬件方式")]),s._v(" "),a("h5",{attrs:{id:"_1、关中断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、关中断"}},[s._v("#")]),s._v(" 1、关中断")]),s._v(" "),a("p",[s._v("实现互斥最简单的方法是在进程中进入临界区时关中断，进程退出临界区时开中断。")]),s._v(" "),a("p",[s._v("关中断的方法简单且有效，操作系统原语就是基于该思路实现的")]),s._v(" "),a("p",[a("strong",[s._v("但该方式不适合作为通用的互斥机制:")])]),s._v(" "),a("ul",[a("li",[s._v("临界区的指令长度应短小精悍，否则关中断的时间过长会影响性能和系统效率")]),s._v(" "),a("li",[s._v("他不适用于多处理系统，一个处理器关中断并不能防止进程在其他处理器上执行相同的临界区代码")]),s._v(" "),a("li",[s._v("若将这项权利赋予用户也在危险，如果用户未开中断，则系统可能因此而终止")])]),s._v(" "),a("h5",{attrs:{id:"_2、测试并设置指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、测试并设置指令"}},[s._v("#")]),s._v(" 2、测试并设置指令")]),s._v(" "),a("p",[s._v("使用硬件所提供的测试并设置（test and set TS）机器指令")]),s._v(" "),a("p",[s._v("测试并建立指令的逻辑是，"),a("strong",[s._v("如果锁在（真值），则上锁（改为假）返回上锁成功，否则返回返回上锁失败")])]),s._v(" "),a("p",[a("strong",[s._v("每一个进程在进入临界区前循环测试能否得到锁，得到则进入，出临界区前卸锁")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\t\t\t\t\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v("false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[s._v("Boolean lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlock "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 临界区可用")]),s._v("\nprocess Pi  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("      \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// i = 1,2,…,n")]),s._v("\n     Boolean pi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     repeat pi"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" until pi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 循环请求锁")]),s._v("\n     临界区"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     lock "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" false；\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 解锁")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h5",{attrs:{id:"_3、对换指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、对换指令"}},[s._v("#")]),s._v(" 3、对换指令")]),s._v(" "),a("p",[s._v("类似功能的指令还有swap，它是一条交换指令。**建立一把锁，假值表示未上锁。**进临界区前，"),a("strong",[s._v("试图把真值换进去，表示上锁")]),s._v("，如果换出来的是真值，表示已经有进程进去了，忙式测试，直到换出假值，表示本进程获得锁并成功上锁进入临界区，"),a("strong",[s._v("出临界区卸锁")])]),s._v(" "),a("p",[s._v("实现临界区管理看的硬件设施")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    temp"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[s._v("Boolean lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlock "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//临界区可用")]),s._v("\nprocess Pi   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("     \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// i = 1,2,…,n")]),s._v("\n    Boolean pi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    pi "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    repeat "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" pi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" until "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("pi；"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//循环请求锁")]),s._v("\n    临界区"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    lock "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" false；\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//解锁")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h5",{attrs:{id:"_4、总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、总结"}},[s._v("#")]),s._v(" 4、总结：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("TS和swap指令均是忙式等待，效率低")])]),s._v(" "),a("li",[a("p",[s._v("简单的解决办法是在进出临界区时开关中断，这样临界区执行就不会中断了，执行就有原子性")]),s._v(" "),a("p",[s._v("关中断；临界区；开中断")]),s._v(" "),a("p",[s._v("操作系统原语就采用这种实现思路")]),s._v(" "),a("p",[s._v("但是，临界区的指令长度应该短小精悍，这样才能保证系统效率")]),s._v(" "),a("p",[s._v("不建议用户程序使用，滥用是可怕的")])])]),s._v(" "),a("h3",{attrs:{id:"_6-3-pv操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-pv操作"}},[s._v("#")]),s._v(" 6.3 PV操作")]),s._v(" "),a("h4",{attrs:{id:"_6-3-1-pv操作与进程互斥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-1-pv操作与进程互斥"}},[s._v("#")]),s._v(" 6.3.1 PV操作与进程互斥")]),s._v(" "),a("h5",{attrs:{id:"_1、针对硬件式管理方式问题的提出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、针对硬件式管理方式问题的提出"}},[s._v("#")]),s._v(" 1、针对硬件式管理方式问题的提出")]),s._v(" "),a("ul",[a("li",[s._v("TS或swap指令管理临界区，采用忙式轮询，浪费系统CPU时间，将测试能否进入临界区的责任推给了各个竞争的进程，削弱了系统的可靠性，加重了用户编程负担，利用效率低")]),s._v(" "),a("li",[s._v("关开中断管理临界区，不便交给用户程序使用")]),s._v(" "),a("li",[s._v("参考：操作系统访问硬件资源时采用“请求-等待-中断恢复”方式")])]),s._v(" "),a("h5",{attrs:{id:"_2、信号量的构思"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、信号量的构思"}},[s._v("#")]),s._v(" 2、信号量的构思")]),s._v(" "),a("p",[s._v("信号量：一种可动态定义的软件源")]),s._v(" "),a("p",[s._v("通过信号量的声明、信号量的撤销、资源的申请、资源的归还对临界区进行有效的管理")]),s._v(" "),a("ul",[a("li",[s._v("核心数据结构：等待进程队列")]),s._v(" "),a("li",[s._v("信号量声明：资源报到，建立队列")]),s._v(" "),a("li",[s._v("申请资源的原语：若申请，得不到资源，调用进程入队等待")]),s._v(" "),a("li",[s._v("归还资源的原语：若队列中有等待进程，需释放")]),s._v(" "),a("li",[s._v("信号量撤销：资源注销，撤销队列")])]),s._v(" "),a("h5",{attrs:{id:"_3、记录型信号量的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、记录型信号量的定义"}},[s._v("#")]),s._v(" 3、记录型信号量的定义")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("记录型信号量：一种带数值的软件资源")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("semaphore")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 信号量值")]),s._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pcb")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 信号量等待进程队列指针")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("每个信号量建立一个等待进程队列")])]),s._v(" "),a("li",[a("p",[s._v("每个信号量相关一个整数值")]),s._v(" "),a("p",[s._v("正值表示资源可复用次数")]),s._v(" "),a("p",[s._v("0值表示无资源且无进程等待")]),s._v(" "),a("p",[s._v("负值表示等待队列中进程个数")])])]),s._v(" "),a("h5",{attrs:{id:"_4、pv操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、pv操作"}},[s._v("#")]),s._v(" 4、pv操作")]),s._v(" "),a("p",[a("strong",[s._v("P操作原语与V操作原语")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[s._v("procedure "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("semaphore"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s – "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("       \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//信号量减去1 ")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("W")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//若信号量小于0，则调用进程")]),s._v("\n                           \t  被置成等待信号量s的状态 \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nprocedure "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("semaphore"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//信号量加1 ")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("R")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//若信号量小于等于0，则释放")]),s._v("\n                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一个等待信号量s的进程 ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("PV操作解决进程互斥问题框架")])]),s._v(" "),a("p",[s._v("与TS指令类似，PV操作也是用了测试信号量的方法决定了进程是否进入临界区。但是不同的是，PV操作只需要对信号量测试一次，而TS指令必须反复测试，从而可能造成忙式等待")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[s._v("semaphore s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ncobegin\n\t process Pi "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t  ……\n\t\t  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("P")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t  临界区；\n\t\t  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t\t  ……\n\t "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\ncoend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("假设在一个有n个进程互斥使用某个临界区的系统中，信号量mutex初值为1，取值范围是-（n-1）~1，当其值等于-（n-1），表明此时有一个进程的临界区内执行，且n-1个进程在信号量队列中等待")]),s._v(" "),a("h5",{attrs:{id:"pv操作解决机票问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pv操作解决机票问题"}},[s._v("#")]),s._v(" PV操作解决机票问题")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Int A[m];\nSemaphore s;\ns = 1;\ncobegin\nprocess Pi {\n\tint Xi;\n\tLi:按旅客定票要求找到A[j]；\n\tP(s)；\n\tXi = A[j];\n\tIf (Xi>=1) { \n\tXi=Xi-1; \n\tA[j]=Xi; \n\tV(s); 输出一张票；\n\t} \t\n\telse {\n    V(s); 输出票已售完;\n    }\n\tgoto Li;\n}\ncoend\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("只有相同航班的票数才是相关的临界资源所以用一个信号量处理全部机票回影响进程并发度")]),s._v(" "),a("p",[a("strong",[s._v("改进之后")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Int A[m];\nSema phore s[m];\nFor (int j=0;j<m;i++) s[j] = 1;\ncobegin\nprocess Pi {\n\tint Xi;\n\tL1:按旅客定票要求找到A[j]；\n\tP(s[j])；\n\tXi = A[j];\n\tIf (Xi>=1) { \n\t\tXi=Xi-1; \n\t\tA[j]=Xi;\n        V(s[j]); 输出一张票；\n\t} else { \n\t\tV(s[j]); 输出票已售完；\n\t}\n\tgoto L1;\n}\ncoend;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h4",{attrs:{id:"_6-3-2-pv操作与进程同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-2-pv操作与进程同步"}},[s._v("#")]),s._v(" 6.3.2 PV操作与进程同步")]),s._v(" "),a("h5",{attrs:{id:"_1、pv操作解决进程同步问题的基本思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、pv操作解决进程同步问题的基本思路"}},[s._v("#")]),s._v(" 1、PV操作解决进程同步问题的基本思路")]),s._v(" "),a("p",[s._v("进程同步：并发进程为完成共同任务基于某个条件来协调，一个进程的执行等待来自于其他进程的消息")]),s._v(" "),a("p",[s._v("同一个同步信号量的P操作和V操作不在一个进程里")]),s._v(" "),a("p",[s._v("2、一个进程的执行等待来自于其他进程的消息")]),s._v(" "),a("p",[a("strong",[s._v("解决的基本思路")])]),s._v(" "),a("ol",[a("li",[s._v("定义一个信号量：其数值代表可用消息数")]),s._v(" "),a("li",[s._v("等待消息进程：执行P，无消息则可等待")]),s._v(" "),a("li",[s._v("发出消息进程：执行V，有等待进程则释放")])]),s._v(" "),a("h5",{attrs:{id:"_2、pv操作解决生产者-消费者问题初探"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、pv操作解决生产者-消费者问题初探"}},[s._v("#")]),s._v(" 2、PV操作解决生产者-消费者问题初探")]),s._v(" "),a("p",[a("strong",[s._v("1、分析问题")])]),s._v(" "),a("p",[s._v("生产者和消费者共享缓冲区")]),s._v(" "),a("p",[s._v("缓冲区有空位时，生产者放入产品，否则等待")]),s._v(" "),a("p",[s._v("缓冲区有产品时，消费者等待可取出产品，否则等待")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151833569.png",alt:"image-20211215183305452"}})]),s._v(" "),a("p",[a("strong",[s._v("2、程序框架")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151833097.png",alt:"image-20211215183341008"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151834342.png",alt:"image-20211215183425266"}})]),s._v(" "),a("p",[a("strong",[s._v("3、解决思路")])]),s._v(" "),a("p",[s._v("同步关系1：消费者一开始在等待产品到来，考虑设置一个信号量（等待产品）；一开始无产品，初始值为0")]),s._v(" "),a("p",[s._v("同步关系2：消费者则在等待缓冲区中有空位，也设置一个信号量（等待缓冲区）；一开始缓冲区有空位，初始值为 1")]),s._v(" "),a("p",[s._v("4、"),a("strong",[s._v("程序实现")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151838057.png",alt:"image-20211215183827969"}})]),s._v(" "),a("h4",{attrs:{id:"_6-3-3-生产者-消费者问题探究"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-3-生产者-消费者问题探究"}},[s._v("#")]),s._v(" 6.3.3 生产者-消费者问题探究")]),s._v(" "),a("h5",{attrs:{id:"_1、生产消费者问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、生产消费者问题"}},[s._v("#")]),s._v(" 1、生产消费者问题")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151840534.png",alt:"image-20211215184054461"}})]),s._v(" "),a("h5",{attrs:{id:"_2、pv-解决生产者1-消费者1缓冲区问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、pv-解决生产者1-消费者1缓冲区问题"}},[s._v("#")]),s._v(" 2、PV 解决生产者1--消费者1缓冲区问题")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151842371.png",alt:"image-20211215184250307"}})]),s._v(" "),a("h5",{attrs:{id:"_3、pv解决生产者1-消费者n缓冲区问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、pv解决生产者1-消费者n缓冲区问题"}},[s._v("#")]),s._v(" 3、PV解决生产者1--消费者N缓冲区问题")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151845460.png",alt:"image-20211215184526353"}})]),s._v(" "),a("h5",{attrs:{id:"_4、pv解决n生产者消费者n缓冲区问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、pv解决n生产者消费者n缓冲区问题"}},[s._v("#")]),s._v(" 4、PV解决N生产者消费者N缓冲区问题")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151915457.png",alt:"image-20211215191407004"}})]),s._v(" "),a("h5",{attrs:{id:"_5、总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、总结"}},[s._v("#")]),s._v(" 5、总结")]),s._v(" "),a("ul",[a("li",[s._v("一个生产对一个消费的：设置一个缓冲区和一个拿和已给可放两个变量")]),s._v(" "),a("li",[s._v("一个生产者对N个消费者者：设置多个缓冲区，一个可拿和一个可放变量，引入下一个放索引和下一个拿索引")]),s._v(" "),a("li",[s._v("N个生产对N个消费者：设置多个缓冲区，设置一个可拿和可放变量，引入下一个放索引和下一个拿索引，再引入两个互斥变量（消费者互斥和生产者互斥）")])]),s._v(" "),a("h5",{attrs:{id:"_6、苹果橘子问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、苹果橘子问题"}},[s._v("#")]),s._v(" 6、苹果橘子问题")]),s._v(" "),a("p",[a("strong",[s._v("问题分析")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112151924853.png",alt:"image-20211215192435651"}})]),s._v(" "),a("p",[a("strong",[s._v("PV操作解决苹果橘子问题")])]),s._v(" "),a("p",[s._v("定义一个空位变量")]),s._v(" "),a("p",[s._v("定义一个苹果数量变量")]),s._v(" "),a("p",[s._v("定义一个橘子数据变量")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202112162307618.png",alt:"image-20211215192936577"}})]),s._v(" "),a("h3",{attrs:{id:"_6-4-管程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-管程"}},[s._v("#")]),s._v(" 6.4 管程")]),s._v(" "),a("h4",{attrs:{id:"_6-4-1-管程概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-1-管程概述"}},[s._v("#")]),s._v(" 6.4.1 管程概述")]),s._v(" "),a("h5",{attrs:{id:"_1、管程概念的提出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、管程概念的提出"}},[s._v("#")]),s._v(" 1、管程概念的提出")]),s._v(" "),a("ul",[a("li",[s._v("管程试图抽象相关并发进程对共享变量访问，以提供一个友善的并发程序设计开发环境")]),s._v(" "),a("li",[s._v("管程是由若干公共变量及其说明和所有访问这些变量的过程所组成")]),s._v(" "),a("li",[s._v("管程把分散在各个进程中互斥地访问公共变量的那些临界区集中起来管理，管程的局部变量只能由该管程的过程存取")]),s._v(" "),a("li",[s._v("进程只能互斥地调用管程中的过程")])]),s._v(" "),a("h5",{attrs:{id:"_2、概念和定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、概念和定义"}},[s._v("#")]),s._v(" 2、概念和定义")]),s._v(" "),a("p",[s._v("相对于信号量和PV操作实现的进程的同步与互斥时，对共享资源的管理分散于各个进程中，它们能够直接对变量进行处理，不利于系统对临界资源的管理。")]),s._v(" "),a("p",[s._v("在进程共享内存的前提下，如果能集中和封装针对一个共享资源的所有访问，即将相关的的共享变量及其操作集中在一起进行控制和管理。")]),s._v(" "),a("p",[s._v("基于抽象数据类型的原理提出新的同步机制——管程")]),s._v(" "),a("p",[a("strong",[s._v("基本思路")]),s._v("：将分散在各个进程中的临界区集中管理，并将共享资源用户数据结构抽象地表示。")]),s._v(" "),a("p",[s._v("管程是由若干局部公共变量及其声明和所有访问这些公共变量的过程所组成的软件模板")]),s._v(" "),a("p",[s._v("管程的基本特征:")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("1.局部于管程的数据只能被局部于管程的过程所访问;")])]),s._v(" "),a("li",[a("p",[s._v("2.一个进程只有通过调用管程内的过程才能进入管程访问共享数据;")])]),s._v(" "),a("li",[a("p",[s._v("3.每次仅允许一个进程在管程内执行某个内部过程。")])])]),s._v(" "),a("p",[a("strong",[s._v("管程的属性：")])]),s._v(" "),a("ul",[a("li",[s._v("共享性")]),s._v(" "),a("li",[s._v("安全性")]),s._v(" "),a("li",[s._v("互斥性")])]),s._v(" "),a("p",[a("strong",[s._v("管程的基本形式")])]),s._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5Cfengq%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211215194125177.png",alt:"image-20211215194125177"}})]),s._v(" "),a("h5",{attrs:{id:"_3、管程的规格定义与实现思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、管程的规格定义与实现思路"}},[s._v("#")]),s._v(" 3、管程的规格定义与实现思路")]),s._v(" "),a("p",[s._v("管程通过防止对一个资源的并发访问达到临界区的效果，它提供了一种实现互斥的简单途径，但是并未提供进程与其他进程通信或同步的手段")]),s._v(" "),a("p",[s._v("当一个进程进入管程并调用了其中一个过程，而该过程执行时发现因资源不能满足而无法继续执行下去时，应阻塞该进程，同时还需开放管程让之前被挡在管程外且排序靠前的一个进程进入管程")]),s._v(" "),a("p",[s._v("解决方法：使用称作条件变量的同步机制，让阻塞进程的临时放弃管程的控制权，在适合时刻检测管程内状态的变化，已恢复进程执行")]),s._v(" "),a("p",[a("strong",[s._v("管程的条件变量")])]),s._v(" "),a("ul",[a("li",[s._v("条件变量（condition variables）：当调用管程过程的进程无法运行时，用于阻塞进程的信号量")]),s._v(" "),a("li",[s._v("同步原语wait：当一个管程过程发现无法继续时（如发现没有可用资源时），它在某些条件变量上执行wait，这个动作引起调用进程阻塞")]),s._v(" "),a("li",[s._v("同步原语signal：用于释放在条件变量上阻塞的进程")])]),s._v(" "),a("p",[a("strong",[s._v("条件变量")]),s._v("：出现管程内的一种数据结构，且只有在管程总才能被访问，其功能是当调用管程过程的进程无法运行时，用于阻塞进程的信号量，它对管程内的所有过程时是全局的")]),s._v(" "),a("p",[s._v("条件变量也是一种信号量，但是它并不是一种信号量，但它并不是PV操作中纯碎的计数信号量，没有与条件变量关联的值，也不能像信号量那样积累供以后使用，仅仅起到阻塞进程队列的作用")]),s._v(" "),a("p",[a("strong",[s._v("管程的执行模型")])]),s._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5Cfengq%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211215194553895.png",alt:"image-20211215194553895"}})]),s._v(" "),a("p",[a("strong",[s._v("操作它的方式：")])]),s._v(" "),a("p",[s._v("wait();操作。当一个进程发现无法继续时，将在某些条件变量上执行wait操作，使得调用过程被阻塞")]),s._v(" "),a("p",[s._v("signal();操作用于释放（唤醒）在条件上阻塞的进程")]),s._v(" "),a("p",[s._v("管程有一个进程恢复后，两个进程的占用管程的问题，一个进程Q在等待，当进程P执行signal（）操作后，进程Q被释放。")]),s._v(" "),a("p",[s._v("可以有以下两种处理方式：")]),s._v(" "),a("p",[s._v("进程P等待直至进程Q退出管程，或者进程Q等待另一个条件（默认）（霍尔）")]),s._v(" "),a("p",[s._v("进程Q等待直至进程P退出管程，或者P等待另一个条件（汉森，故管程的signal操作是过程中体的最后一个操作）")]),s._v(" "),a("h4",{attrs:{id:"_6-4-2-霍尔管程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-2-霍尔管程"}},[s._v("#")]),s._v(" 6.4.2 霍尔管程")]),s._v(" "),a("p",[s._v("霍尔管程是一种具普适性的管程实现方法，它使用了PV操作原语实现对管程中过程的互斥调用功能，同时实现对共享资源的互斥使用的管理。每当有进程等待资源时，霍尔管程将让执行signal操作的进程阻塞自己，直到被它释放的进程退出管程或产生了其他的等待条件为止。")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103150.png",alt:"image-20211121234005527"}}),s._v(" "),a("p",[s._v("与汉深管程的实现区别就是：该方法不要signal操作是过程的最后一个操做，且wait和signal操作可被设计成两个可以中断的过程，非原语")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103151.png",alt:"image-20211121234131025"}}),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103152.png",alt:"image-20211121234318851"}}),s._v(" "),a("h4",{attrs:{id:"_6-4-3-霍尔管程的例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-3-霍尔管程的例子"}},[s._v("#")]),s._v(" 6.4.3 霍尔管程的例子")]),s._v(" "),a("p",[a("strong",[s._v("1、解决哲学家就餐的问题")])]),s._v(" "),a("img",{staticStyle:{zoom:"33%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103153.png",alt:"image-20211121234531308"}}),s._v(" "),a("p",[a("strong",[s._v("2、管程解决读者-写者问题")])]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103154.png",alt:"image-20211121234621051"}}),s._v(" "),a("h3",{attrs:{id:"_6-5-进程通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-进程通信"}},[s._v("#")]),s._v(" 6.5 进程通信")]),s._v(" "),a("p",[s._v("6.5.1 进程的通信")]),s._v(" "),a("p",[s._v("系统中的交互进程可以通过信号量及PV操作实现进程互斥和同步。")]),s._v(" "),a("p",[s._v("通过交换信号量已达到递交产品和使用缓冲区的目的，这可以看作是一种"),a("strong",[s._v("低级通信方式")])]),s._v(" "),a("p",[s._v("大量信息传递可使用的"),a("strong",[s._v("高级通信方式")]),s._v("——进程间通信机制")]),s._v(" "),a("p",[a("strong",[s._v("1、进程直接通信")])]),s._v(" "),a("p",[s._v("在进程直接通信方式下，企图发送或接收信息的每个进程必须指出信件发给谁或从谁哪里接收信件")]),s._v(" "),a("p",[s._v("send(P,信件);")]),s._v(" "),a("p",[s._v("recevice(Q,信件);")]),s._v(" "),a("p",[a("strong",[s._v("2、进程间接通信")])]),s._v(" "),a("p",[s._v("采用间接通信方式时，进程间发送或接收信件通过一个共享的数据结构——信箱")]),s._v(" "),a("p",[s._v("信箱是存放信件的存储区域，每个信箱可以分成信箱特征和信箱体两部分")]),s._v(" "),a("p",[s._v("信箱特征：指出信箱的容量、信件格式、存放信件位置的指针")]),s._v(" "),a("p",[s._v("信箱体：存放信件")]),s._v(" "),a("p",[s._v("间接方式：")]),s._v(" "),a("p",[s._v("send(A,信件);将信件发送到信箱A")]),s._v(" "),a("p",[s._v("recevice(A,信件);将信箱A接收信件A")]),s._v(" "),a("h4",{attrs:{id:"_6-5-2-高级进程通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-2-高级进程通信"}},[s._v("#")]),s._v(" 6.5.2 高级进程通信")]),s._v(" "),a("p",[s._v("1、基于流的进程通信")]),s._v(" "),a("p",[s._v("基于字节流的通信：多个进程可以使用一个共享的消息缓冲区，这个缓冲区将被组织成一个字节流，而非一个信件流")]),s._v(" "),a("p",[s._v("发送者或称为发送信息的进程向消息缓冲区写入字节流，接收消息的进程则从消息缓冲区中读取字节流，只要缓冲区有足够的字节数，就可以读出来，如果没有足够的字节数，就去等待消息。")]),s._v(" "),a("p",[s._v("2、基于RPC的高级通信规约")]),s._v(" "),a("p",[s._v("远程调用（RPC）是目前在分布式系统中广泛采用的进程通信方法，他将单机环境下的过程调用扩展到分布式环境中，允许不同计算机上的进程使用简单的过程调用和返回结果的方式进行交互")]),s._v(" "),a("p",[s._v("客户机某个进程调用服务的一个过程，发出一条带有RPC的命令——》客户端存根委托她代理作为自己的代理——》调用执行远程过程低调用，打包参数成消息——》执行原语返送到服务器——》执行receive原语阻塞自己直到收到服务器的答复——》消息送回客户机后，客户端的内核找到消息并将其送给客户存根——》客户存根检查并拆开消息包，将取出的结果返回给调用的进程——》通过调用进程获得控制权并得到本次过程调用的结果。")]),s._v(" "),a("p",[s._v("当消息到服务器之后，服务端的内核将消息传送到服务器存根——》服务器存根调用receive原语阻塞自己等带消息到达——》服务器存根拆包从消息中取出参数，调用服务器进程调用过程并返回结果——》当过程结束，服务器存根获取控制权，将结果打包成消息——》调用send原语请求内核将包含结果的消息发回给调用者——》服务器存根调用receive阻塞自己等待下一个消息")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103155.png",alt:"image-20211121234709721"}}),s._v(" "),a("p",[s._v("3、基于RPC/XDR的高级通信规约")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103156.png",alt:"image-20211121234808893"}}),s._v(" "),a("h3",{attrs:{id:"_6-6-死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-死锁"}},[s._v("#")]),s._v(" 6.6 死锁")]),s._v(" "),a("h4",{attrs:{id:"_6-6-1-死锁的产生"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-1-死锁的产生"}},[s._v("#")]),s._v(" 6.6.1 死锁的产生")]),s._v(" "),a("p",[a("strong",[s._v("1、死锁的定义")])]),s._v(" "),a("p",[s._v("一个进程需要独占访问不止一个资源，系统允许多个进程并发执行共享系统资源时，可能会出现所有进程被永久阻塞的现象，叫死锁")]),s._v(" "),a("p",[s._v("如果在一个进程集合中，每个进程都在等待只能由该集合中的另一个进程才能引发的事件，则成一组进程或系统此时发生了死锁。")]),s._v(" "),a("p",[a("strong",[s._v("2、死锁产生的举例")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("竞争资源产生死锁")]),s._v(" "),a("p",[s._v("进程P和进程Q执行时，相对速度无法预知，当进程P占用读卡机，进程Q占用请求打印机，进程P请求打印机，但打印机被进程Q占用。")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103158.png",alt:"image-20211121210101747"}})]),s._v(" "),a("li",[a("p",[s._v("PV操作使用不当产生死锁")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103159.png",alt:"image-20211121210215740"}})]),s._v(" "),a("li",[a("p",[s._v("同类资源分配不当引发起死锁")]),s._v(" "),a("p",[s._v("资源m=5,进程n=5,需求资源k=2,采用分配策略是为每一个进程轮流分配，第一轮分配5个进程都有1个资源，但不满足需求便进行等待")])]),s._v(" "),a("li",[a("p",[s._v("对临时性资源使用不加限制引起死锁")]),s._v(" "),a("p",[s._v("进程通信时使用的信件可以看作一种临时性资源。")]),s._v(" "),a("p",[s._v("p1(等s3)  --发送s1--\x3e  P2(等s1)    --s2--\x3e   P3(等s2)  --s3--\x3e  P1")]),s._v(" "),a("p",[s._v("便形成一个资源的等待的状态。")])])]),s._v(" "),a("h4",{attrs:{id:"_6-6-2-死锁的防止"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-2-死锁的防止"}},[s._v("#")]),s._v(" 6.6.2 死锁的防止")]),s._v(" "),a("p",[a("strong",[s._v("1、死锁产生的条件")])]),s._v(" "),a("ul",[a("li",[s._v("互斥条件")]),s._v(" "),a("li",[s._v("占有和等待条件")]),s._v(" "),a("li",[s._v("不剥夺条件")]),s._v(" "),a("li",[s._v("循环等待条件")])]),s._v(" "),a("p",[s._v("前三条件是死锁存在的必要条件，但不是充分条件，第四条件是前三个条件同时存在产生的结果。")]),s._v(" "),a("p",[a("strong",[s._v("破坏四个必要条件之一，就可以防止死锁")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("破坏互斥条件")]),s._v("，使资源可同时访问不是互斥使用。（磁盘就可以采用该方法进行管理，但是有许多资源往往是不能同时访问的、SPOOLingd技术）")]),s._v(" "),a("li",[a("strong",[s._v("采用剥夺式调度方法可以破坏不剥夺条件")]),s._v("，但是剥夺调度方法目前只适用于对主存和处理资源的分配。")])]),s._v(" "),a("p",[a("strong",[s._v("2、静态分配策略")]),s._v("（"),a("strong",[s._v("破坏占有和等待条件")]),s._v("）")]),s._v(" "),a("p",[s._v("静态资源分配是一个进程必须再执行前就申请它需要的全部资源，并且直到他需要的资源都得到满足后才开始执行。")]),s._v(" "),a("p",[s._v("分配之后，进程在执行中不再申请资源")]),s._v(" "),a("p",[s._v("优点：实现简单")]),s._v(" "),a("p",[s._v("缺点：降低了资源利用率")]),s._v(" "),a("p",[a("strong",[s._v("3、层次分配策略")]),s._v("（"),a("strong",[s._v("阻止循环等待条件的出现")]),s._v("）")]),s._v(" "),a("p",[s._v("系统将资源分为多个层次")]),s._v(" "),a("p",[s._v("一个进程得到某一层的一个资源后，他只能申请较高的一层")]),s._v(" "),a("p",[s._v("一个进程要释放某层资源时，必须先释放所占用的较高层的资源")]),s._v(" "),a("p",[s._v("一个进程获得一层的资源后，想要再次申请该层资源也要先释放本层资源。")]),s._v(" "),a("p",[s._v("缺点：层次分配比静态分配实现上代价要大")]),s._v(" "),a("p",[s._v("优点：提高了资源利用率，但是资源使用的次序和系统规定的次序不同，效率就不死很明显。")]),s._v(" "),a("h4",{attrs:{id:"_6-6-3-死锁的避免"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-3-死锁的避免"}},[s._v("#")]),s._v(" 6.6.3 死锁的避免")]),s._v(" "),a("p",[s._v("不能防止死锁的产生、就尽量避免死锁")]),s._v(" "),a("p",[s._v("银行家算法：检查申请者对各类资源的最大需求量，如果系统现存的各类资源可以满足它的最大需求量时，就满足当前的申请。")]),s._v(" "),a("p",[s._v("银行家算法可以避免死锁，但是十分保守，资源利用率比较低。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103160.png",alt:"image-20211121210450951"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103659.png",alt:"image-20211121210533249"}})]),s._v(" "),a("h4",{attrs:{id:"_6-6-4-死锁的检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-4-死锁的检测"}},[s._v("#")]),s._v(" 6.6.4 死锁的检测")]),s._v(" "),a("p",[s._v("对资源的的分配加以限制可以防止和避免死锁的发生，但不利于各进程对系统资源的充分共享。")]),s._v(" "),a("p",[s._v("解决死锁问题的另一条途径是对资源的分配不加于限制，但是系统会定时运行一个死锁检测程序。")]),s._v(" "),a("p",[a("strong",[s._v("等待资源表和占用资源表")])]),s._v(" "),a("p",[s._v("通过设置两张表格记录进程的使用资源的情况，即等待资源表记录每个被阻塞进程等待的资源，占用资源表记录每个进程占有的资源。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103279.png",alt:"image-20211121210633845"}})]),s._v(" "),a("p",[s._v("等待占用关系：如果有进程Pi等待资源rk，且rk被进程Pi占用，则说明Pi和Pj具有等待占用关系，记为W(Pi,Pj)，当出现W(Pi,Pj),W(Pj,Pk),...,W(Pl,Pm),W(Pm,Pi)时，系统中就存在一组循环等待资源的进程Pi，Pj....Pm,也就表明系统出现死锁。")]),s._v(" "),a("p",[a("strong",[s._v("死锁检测的方法")])]),s._v(" "),a("p",[s._v("将两张表格中记录的进程使用和资源等待的情况用矩阵表示")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-imageimage-20211121210703175.png",alt:"image-20211121210703175"}})]),s._v(" "),a("p",[s._v("当Pi等待被Pj占用的资源时，bij的值记为1，当Pi和Pj不存在等待占用关系时，bij的值记为0。")]),s._v(" "),a("p",[s._v("死锁检测程序可用Warshall的传递闭包算法，A*[bij]")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/FengqWorld/studyImage/markdown-image202111220103161.png",alt:"image-20211121210734166"}})]),s._v(" "),a("p",[a("strong",[s._v("死锁的检测和解除")])]),s._v(" "),a("ul",[a("li",[s._v("结束所有进程的执行，并重新启动操作系统。")]),s._v(" "),a("li",[s._v("撤销陷于死锁的所有进程，解除死锁，重新启动执行")]),s._v(" "),a("li",[s._v("在进程执行过程中定时设置校验点，从校验点开始重执行，让进程回退，直到足以解决死锁")]),s._v(" "),a("li",[s._v("中止一个卷入死锁的过程，以后再重新执行")])])])}),[],!1,null,null,null);t.default=r.exports}}]);